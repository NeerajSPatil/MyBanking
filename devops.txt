who
                                | database procedure writer 
                                | java developer
                                | HIBERNATE/SPRING/SERVICE
                                | tester
                                | deployer
                                | page author | html / angular
                --------------------------------------
                |                                |
                where                                when
                |                                |
        --------------------------------------------------
        |                        |                        |
        why                        what                        how
        |                        |                        |
        reason                        information        implementation
















                            Dev <==>  Ops


                Developers                Operations [ Deployment ]
                |                        |
        flight developer/engineers        flight operators [ pilot / cabin crew
        [ factory ]                        airport base/ground staff operations ]
        




                MobileFactory                MobilePhone [Product] <-- is shown
                |                        |
                |                        image - 3 d image
                                        |
                                        star ratings 4.5 /review  = 3890
                                        


                        Java Technology
                                |
                                |
                -----------------------------------------
                |                |                |
                JSE                JEE                ME
                | CORE                |                |
                standard        enterprise        micro
                                |
                -------------------------------------
                | spring        |hibernate        |java message api
                Session                Entity                Message
                |                |                |
        ------------------        -----------        -----------
        |                |        |        |        |        |
        Stateless   Stateful        bmp        cmp     sms     mail
                                |         |
                bean managed persistence  Container managed persistence
                |                |
                |        storing java object on the database (jdbc)
        java developer                insert/update/delete/select-nested select
        as bean provider        ddl/tcl
        class FlightTicket { }
        class Flight { }
        class Passenger  { }


        Server
        |
        Session
        |
        Client/browser ( google account )




                Airline website
                |  airinida.com
                |  2 flights found : mum-lon for 31st 7 - total seats 87/200
                |  1 flight found  : mum-fra for 31st 
        ------------------------------------------
        |        |        |                        |
        cl1        cl2        cl3        cl4        cl5        cl6
        enquiry enquiry enquiry        enquiry        enquiry        enquiry
        mum        mum        mum        mum        mum        mum
        lon        lon        lon        fra        fra        lon
        31-7        31-7        31-7        31-7        31-7        31-7
                |         |
                confirm cofirm
                the         the
                tickets ticket
                |        |
                signup signin
                        |
                        dashboard






        developer        tester                deployer                End User
        |                |                |                           |
        coding                testing                put it on the server ---> using 
        |                |                |                          the live
        .class                test .class        xml/conf/ini                  withdraw()
                        |                environmental settings
                  failed|passed                 + your .class files
                <-------+--------->
bal=50000                |
withdraw(float amt)        withdraw(4000)
{
  if(amt<0)
   amt cannot be -tive
  if(amt>bal)
   insuff funds
  else
   bal=bal-amt;
}
                        


MAVEN - apache maven
---------------------------




        what is a jar file? = 


                Java ARchieve = tape archieve


        jar file = collection of several .class files as a "single" unit "file"




        .jar = collection(bundle) of .class files


                        machine1 machine2 machine2
                        |         |          |
                        pom.xml        pom.xml        pom.xml        
                                
                        rt.jar        rt.jar        rt.jar                        x | diff name
        jdk                jdk1.8        jdk1.8        jdk8        jdk14        jdk15        jdk16
        |                |        |        |                        |
        spring                5        5        5                        5
        |                |        |        |                        |
        hibernate        4        4        4                        4
        |                |        |        |                        |
        database        12        12        12                        18
        |                
        frameworks        libs        libs        libs                        libs
                        |
                        ojdbc6_g.jar                            ojdbc8.jar
                
                automation of build "infrastructure"




        "expanding universe"
                |
physical mental emotional spriritual






                web project
                spring mvc
                core java project
                rmi project
                hundred/thousand of project types
                




developer                tester                deployer        end user


step1. notepad Greeting.java
public class Greeting {
  public static void main(String args[])  {
        Greet g = new Greet();
        g.greetMyStudents();
  }
}
class Greet {
   void greetMyStudents() {
       System.out.println("Greeting from Vishhal");
   }
}        
step 1.1 : notepad manifest.mf
           Main-Class: Greeting
           |        |     |
          in capital  space here


step2: jar -cvfm greet.jar manifest.mf Greet.class Greeting.class (-c means to create jar)


step3: jar -tvf greet.jar (-t means show the table of content)


step4: java -jar greet.jar


============================================================
notepad greet.bat
        echo "compiling .."
        javac Greeting.java
        echo "Bundling into jar files .."
        jar -cvfm greet.jar manifest.mf Greet.class Greeting.class
        echo "Running the jar file..."
        java -jar greet.jar


greet <-- run this file








---------------------------------------------------------------------




        jdk installed 
        |
        jdk16 is installed 




                        c:\
                        |
        -----------------------------
                |
                program files
                |
                jdk16
                |
                bin










1. notepad JungleTest.java
                ( make main() )
                ( make other 6 classes )


2. javac JungleTest.java


3. notepad manifest.mf
        Main-Class: JungleTest
   
4. jar -cvfm jungle.jar  manifest.mf Tiger.class Lion.class Fox.class Cow.class Cat.class Dog.class




5. how do u cross verify the jar file's content
        jar -tvf jungle.jar


6. update the jar file
        jar -uvf jungle.jar  JungleTest.class


7. deploy and run it
        java -jar jungle.jar










        Maven = Project management tool


        POM - project object model


                        pom.xml 
                              |
                           data description        
                        java version
                        test version
                        spring version
                        hibernate
                        oracle 
                        ...
                        ...
                        ...


        
        c:\> mymvn ( greet.bat  wild.bat )
                |
        A        compiled = javac
        B        generated the jar by adding manifest = jar 
        C        run the jar = java -jar 
        D
        E
        F


        how to make a clarified butter - indian ghee


        A.        milk a cow
        B.        coagulate the milk - to get the curd
        C.        churn the curd - to get the butter
        D.        boil the butter - to get the clarified butter
        E.        make sweets from this clarified butter
        F.        pack the sweets 
        G.        display sweets => for sale






        project root = D:\Get940\maven\MyAirlineProject
        model version = version here
        group id = unique id = com.lti / com.airline / com.mybank
        artifact id = ticket-booking
                        


        The build lifecycle
        PHASE
                                                - type in eclipse
        1 prepare resource = make your source code ready - download it from other location
                                        - get it from github


        2 validate 


                        web project <-- this is an example of java web project
                                |
                        -------------------
                        |                |
                        WEB-INF                lib
                        |                |
                -----------------        .jar
                |                |
                classes                web.xml
                |
                your class files




        3. compile         your code


        4. test                 your code


        5. package          jar file / bundle


                        .jar / .war / .ear 


        6. install        copy the files on maven repo
                        local/global


                        tea bags on the dining - local


                        tea bags in the kichen - global


                        tea bags u got from the - remote 
                        shop






        7. deploy        deployment - copy the application 
                        package on the remote repo






        lets make a first maven based project






        archeType
                |
        ----------------------------------------------------------
        |                |                |                |                |
        student1        student2        student3        student3        student5        student6         
        |                |                |                 |                        
  Mahatma Gandhi     Veer Sawarkar   Queen Laxmi Bai        Chaha Nehru        Doctor                soldier        ..        ..        ..        ..        ..        ..        ..






        core java
                |
        ---------------
        |        |
        bin        src
        |        |
        .class .java










        mvn archetype:generate  


                -DgroupId=com.lti.airline 
                -DartifactId=AirlineProject 
                
                -DarchetypeArtifactId=maven-archetype-quickstart 
        
                -DinteractiveMode=false


core java project1
        |
        any folder
        |
        First.java
        First.class


core java project2
        |
        any folder
        |
---------------------
|                |eclipse
src                bin/out <--intellij
|                |
First.java        First.class
                
                                github/bitbucket


                Home                                        office
                |
                AirlineProject                ------------>        
                |
                src
                |
        --------------------------------------
        |                |                |
        main                test                pom.xml                        pom.xml
        |                |                                        |
        java                java                                        6th dependency
        |                |                                        is added
-----------                ------------                                security related
|                                |
all your packages                all your test packages
here
        |        |        |        |                |
        jdk        spring        hib        oraclejdbcjars junit


7 8 dependencies related to transaction management




D:.
+---AirlineProject <-- artifactId
    ¦   pom.xml
    ¦
    +---src
        +---main <-standard name here
        ¦   +---java <-standard name here
        ¦       +---com <-- gropId
        ¦           +---lti
        ¦               +---airline
        ¦                       App.java
        ¦
        +---test <-standard name here
            +---java <-standard name here
                +---com
                    +---lti
                        +---airline
                                AppTest.java












        <dependency>
                spring specific dependencies are here
        </dependency>


        <dependency>
                oracle jdbc driver specific dependencies are here
        </dependency>


        <dependency>
                hibernate specific dependencies are here
        </dependency>


        <dependency>
                spring JPA specific dependencies are here
        </dependency>




1. make a folder of your choice, in that folder type below maven command
        d:\> mkdir mymaven
        d:\> cd    mymaven
        d:\mymaven> mvn archetype:generate  
                -DgroupId=com.lti.airline 
                -DartifactId=AirlineProject                 
                -DarchetypeArtifactId=maven-archetype-quickstart         
                -DinteractiveMode=false


2.        cd AirlineProject
        observe the pom.xml file <-- in AirlineProject
        add the following lines, after the <url> tag
         <properties>
                <maven.compiler.source>1.8</maven.compiler.source>
                <maven.compiler.target>1.8</maven.compiler.target>
          </properties>


3. AirlineProject > mvn clean package


4. cd target\classes> java com.lti.airline.App


        
        
        class SavingsAccount
        {
                float bal;


                void withdraw(float amt)
                {
                        bal = bal - amt;
                        bal = bal-1;
                }
        }


        class TestSavingsAccount
        {
                @Test
                void testWithdraw()
                {
                         SavingsAccount sa = Bank.createAccount(....);
                         assertNotNull(sa);
                         sa.withdraw(50000,5000,45000); 44999
                         assert...
                         assertTrue( true );
                         assertTrue( true );
                         assertTrue( true );
                }
        }






        
        Home                                                Office
        |                                                 |
        Machine1        ------------------------------> Machine
                                                        | New machine today        
                                                        You
        |                                                |
        java project - 1.8                                install 1.8
        |                                                |
        spring5 library - downloaded (.jars)                re-download spring jars
        |
        hibernate4 library - downloaded (.jars)                re-download hibernate jars
        |
        oracle12 - downloaded (.jar - ojdbc6_g.jar)        re-download db jars






        Office another branch
        |
        new machine again
        |
        install 1.8
        |
        re-download spring jars
        re-download hibernate jars
        re-download db jars


=========================================


        laundry


        HotelRoom                HotelHome                HotelHome
        


        wash the cloth                 manually                manually
        manually


                remote repository


        62 = 20 teams


        team1
        <------------------------------------->
        pom.xml                pom.xml                pom.xml
        |                |                |
        abc.java        abc.java        abc.java
        |                |                |
        jdk1.8                jdk11                jdk1.8 
        |AccessDB.class        |                |AccessDB.class
        vidya                himanshu        harshit
        |                |                |
        hibernate4        hibernate4        hibernate4
                        |
                        xml specific
                        classes are missing
                        |
                        if it is a maven project
                        then add this dependency in pom.xml


        


        maven offers automation of project's build infrastructure


        .m2 folder <- local repository                        global repository
                                                        .m2 
        Machine1        ------------------------------> Machine1 MAchine2 Machine3 ....
        home                                                | New machine today        
        |                                                You
        |                                                |
        maven project 1                                        maven project 1        
        |                                                |pom.xml
        pom.xml ( declare dependencies there )                |
        |                                                |
        spring5 library - downloaded (.jars)                re-download spring jars
        |
        hibernate4 library - downloaded (.jars)                re-download hibernate jars
        |
        oracle12 - downloaded (.jar - ojdbc6_g.jar)        re-download db jars
        |
        Junit - library




        Office another branch
        |
        new machine again
        |
        install 1.8
        |
        re-download spring jars
        re-download hibernate jars
        re-download db jars






        why do we use archetype???


        projects are of different types
                                |
                        different structure




        corejava project        web project        hibernate project
        |                        |                |
        ---------                WEB-INF                ------
        |        |                |
        src        bin        -------------
                        |        |
                    classes        web.xml
















=============================================




        Junit 4


        Junit 5 - Junit Jupitor 




                Framework = semi developed application 


                jdk 1.8 above 


        
        Annotation - extended version of comment


        @Override - to tell the method is overridden


        @Test - to specify the test case


        Custom annotation = 


        


        
                
        class SavingsAccount
        {
                void withdraw() { }
                void deposit() { }
        }


        class SavingsAccountTest
        {
                
                SavingsAccount s = new SAvingsAccount();


                @Test
                void testWithdraw()
                {
                
                        s.withdraw();
                }


                @Test
                void testDeposit()
                {
                        
                        s.deposit();
                }


                @Test
                void testTransfer()
                {
                        
                        SavingsAccount t = new SAvingsAccount(40000);
                        s.withdraw(7000);
                        t.deposit(7000);
                }


        }






        A 10
        s |                        collaboration
        s |
        e |
        r |
        t |
        i |
        v |
        e |
        n |
        e |
        s |
        s |
          --------------------------------------->
          0                                  10
           C o o p e r a t i v e n e s s


        








        if you want to transfer the funds 
        from source to target


        TransferTest.java
        |
                findSourceTest(){ jdbc select query}
                findTargetTest(){ jdbc select query}
                findSuffBalanceInSourceTest(){ jdbc select bal query}
                withdrawInSourceTest(){ update query }
                depositToTargetTest(){ update query }






        TransferTest.java
        |
                test1(){ jdbc select query}
                test2(){ jdbc select query}
                test3(){ jdbc select bal query}
                test4(){ update query }
                test5(){ update query }




java.lang.NoClassDefFoundError: org/junit/platform/commons/util/ClassNamePatternFilterUtils




        source 50000 -3000        = 47000 (expected balance of the source)
        target 20000 + 3000        = 23000 (expected balance of the target)


        transfer = 3000


                1. presence of source
                2. presence of target


                3. presence of sufficient amount to transfer from source


                4. debit from source - withdraw() - BUSINESS
                5. expected 47000 at source


                6. credit to target - deposit() - BUSINESS
                7. expected 23000 at target